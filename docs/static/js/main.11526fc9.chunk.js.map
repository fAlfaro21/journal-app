{"version":3,"sources":["types/types.js","reducers/uiReducers.js","reducers/notesReducer.js","store/store.js","reducers/authReducer.js","firebase/firebaseConfig.js","helpers/loadNotes.js","helpers/fileUpload.js","actions/notes.js","actions/ui.js","actions/auth.js","hooks/useForm/useForm.js","components/auth/LoginScreen.js","components/auth/RegisterScreen.js","routers/AuthRouter.js","routers/PrivateRoute.js","routers/PublicRoute.js","components/journal/JournalEntry.js","components/journal/JournalEntries.js","components/journal/Sidebar.js","components/notes/NotesAppBar.js","components/notes/NoteScreen.js","components/journal/NothingSelected.js","components/journal/JournalScreen.js","routers/AppRouter.js","JournalApp.js","index.js"],"names":["types","initialState","loading","msgError","notes","active","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","auth","state","action","type","uid","payload","name","displayName","ui","map","note","id","filter","store","createStore","applyMiddleware","thunk","firebaseConfig","apiKey","process","REACT_APP_APIKEY","authDomain","REACT_APP_AUTHDOMAIN","projectId","REACT_APP_PROJECTID","storageBucket","REACT_APP_STORAGEBUCKET","messagingSenderId","REACT_APP_MESSAGINGSENDERID","appId","REACT_APP_APPID","firebase","initializeApp","db","firestore","googleAuthProvider","GoogleAuthProvider","loadNotes","a","collection","get","notesSnap","forEach","snapHijo","push","data","fileUpload","file","formData","FormData","append","fetch","method","body","resp","ok","json","cloudResp","secure_url","activeNote","addNewNote","startLoadingNotes","dispatch","setNotes","startSaveNote","getState","url","noteToFirestore","doc","update","refreshNote","Swal","fire","title","deleteNote","setError","err","finishLoading","startLoginEmailPassword","email","password","signInWithEmailAndPassword","then","user","login","catch","e","console","log","message","logout","useForm","useState","values","setValues","reset","newFormState","handleInputChange","target","value","LoginScreen","useDispatch","useSelector","className","onSubmit","preventDefault","placeholder","autoComplete","onChange","disabled","onClick","signInWithPopup","src","alt","to","RegisterScreen","password2","isFormValid","trim","length","validator","isEmail","createUserWithEmailAndPassword","updateProfile","startRegisterWithEmailPasswordName","AuthRouter","exact","path","component","PrivateRoute","isAuthenticated","Component","rest","props","PublicRoute","JournalEntry","date","noteDate","moment","style","backgroundSize","backgroundImage","format","JournalEntries","Sidebar","signOut","newNote","Date","getTime","add","NotesAppBar","display","files","text","allowOutsideClick","onBeforeOpen","showLoading","fileUrl","close","startUploading","document","querySelector","click","NoteScreen","activeId","useRef","useEffect","current","delete","startDeleting","NothingSelected","JournalScreen","AppRouter","checking","setChecking","isLoggedIn","setIsLoggedIn","onAuthStateChanged","JournalApp","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.11526fc9.chunk.js","sourcesContent":["//ESTE FICHERO/OBJETO VA A TENER TODOS LOS TYPES DE MI APLICACION\r\n\r\nexport const types = {\r\n\r\n    //estas acciones reacciona al reducer Auth\r\n    login:  '[Auth] login',\r\n    logout: '[Auth] logout',\r\n\r\n    //estas acciones reacciona al reducer UI\r\n    uiSetError: '[UI] Set Error',\r\n    uiRemoveError: '[UI] Remove Error',\r\n\r\n    uiStartLoading: '[UI] Start Loading',\r\n    uiFinishLoading: '[UI] Finish Loading',\r\n\r\n    //estas acciones reacciona al reducer NOTES\r\n    notesAddNew: '[Notes] New note',\r\n    notesActive: '[Notes] Set active note',\r\n    notesLoad: '[Notes] Load notes',\r\n    notesUpdated: '[Notes] Updated notes',\r\n    notesFileUrl: '[Notes] Updated image url',\r\n    notesDelete: '[Notes] Delete note',\r\n    notesLogoutCleaning: '[Notes] Logout Cleaning',\r\n}","import { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    msgError: null\r\n}\r\n\r\nexport const uiReducer = ( state = initialState, action ) => {\r\n\r\n    switch ( action.type ) {\r\n        case types.uiSetError:\r\n            return {\r\n                ...state,\r\n                msgError: action.payload\r\n            }\r\n        case types.uiRemoveError:\r\n            return {\r\n                ...state,\r\n                msgError: null\r\n            }\r\n        case types.uiStartLoading:\r\n        return {\r\n            ...state,\r\n            loading: true\r\n        }\r\n        case types.uiFinishLoading:\r\n        return {\r\n            ...state,\r\n            loading: false\r\n        }\r\n        default: \r\n            return state;    \r\n    }\r\n}","/*\r\nESTE REDUCER TENDRA LA SIGUIENTE ESTRUCTURA:\r\n    {\r\n        notes: [],                  -> Sera un array que contendra todas las NOTAS del usuario\r\n        active: null,               -> Si active es == null, entonces quiere decir que no hay ninguna nota seleccionada\r\n                                        y se mostrara la pantalla morada unicamente\r\n        active: {                   -> Si existe una nota activa (abierta):\r\n            id: 'OIUKJHDTOIUKJNBE'  -> id que da Firebase,\r\n            title: '',              -> Es el titulo de la nota (string)\r\n            body: '',               -> Es el cuerpo de la nota (string)\r\n            imageUrl: '',           -> Es la imagen de la nota (string)\r\n            date: 1284756\r\n        }\r\n    }\r\n*/\r\n\r\nimport { types } from \"../types/types\";\r\n\r\nconst initialState ={\r\n    notes: [],\r\n    active: null\r\n}\r\n\r\nexport const notesReducer = ( state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        \r\n        case types.notesActive:\r\n            return {\r\n                ...state,\r\n                //Colocamos la nota activa\r\n                active: {\r\n                    ...action.payload\r\n                }\r\n            }\r\n\r\n        //Para hacer aparecer una nueva nota en la barra izq, una vez que hagamos clic en anadir\r\n        case types.notesAddNew:\r\n            return {\r\n                ...state,\r\n                notes: [ action.payload, ...state.notes ]\r\n            }\r\n        \r\n        case types.notesLoad:\r\n            //console.log(action.payload);  //->  nos dice que estamos recibiendo una promesa\r\n            return {\r\n                ...state,\r\n                //Cargamos las notas\r\n                notes: [ ...action.payload ]\r\n            }\r\n\r\n        case types.notesUpdated:\r\n            return{\r\n                ...state,\r\n                //Aqui mandamos la modificacion de la nota\r\n                notes: state.notes.map(\r\n                    //Si son iguales, se trata de la nota que necesito actualizar (asi evito actualizar toda la lista de notas)\r\n                    note => note.id === action.payload.id\r\n                    ? action.payload.note\r\n                    : note\r\n                )\r\n            }\r\n\r\n        case types.notesDelete:\r\n            return{\r\n                ...state,\r\n                active: null,\r\n                //Devuelvo todas las notas cuyo id es distinto al que quiero borrar \r\n                notes: state.notes.filter( note => note.id !== action.payload )\r\n            }\r\n        \r\n        case types.notesLogoutCleaning:\r\n            return{\r\n                ...state,\r\n                active: null,\r\n                notes: []\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\n//El thunk es un middleware que nos va a permitir trabajar con acciones asincronas\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { authReducer } from '../reducers/authReducer';\r\nimport { uiReducer } from '../reducers/uiReducers';\r\nimport { notesReducer } from '../reducers/notesReducer';\r\n\r\n//Esta constante nos va a permitir utilizar varios middlewares (en este caso, las devtools y el thunk), ya que\r\n//el createStore solo nos permite utilizar uno al tiempo\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\n//Esto me ayudara a poder tener mas de 1 reducer\r\n//Aqui se define la estructura del Store\r\nconst reducers = combineReducers({\r\n    //el authReducer es el reducer que nosotros nos hemos creado para la App\r\n    auth: authReducer,\r\n    ui: uiReducer,\r\n    notes: notesReducer\r\n});\r\n\r\n//createStore unicamente acepta un reducer, por eso hemos creado antes un combineReducer\r\n//createStore unicamente acepta un middleware, por eso hemos creado antes un composeEnhancers, asi podemos utilizar el\r\n//middleware de las devtools + el thunk\r\nexport const store = createStore(\r\n    reducers,\r\n    composeEnhancers(\r\n        applyMiddleware( thunk )\r\n    )\r\n);","import { types } from '../types/types';\r\n\r\n//Los reducers reciben dos cosas: un state y un action.\r\n//Inicializamos el state con un objeto vacio\r\n//El state va a guardar el estado de la autenticacion, con lo que:\r\n//  Si el usuario esta autenticado, tendra los siguientes valores:\r\n//      {\r\n//          uid: 'jajdfja3653947498989898',\r\n//          name: 'Fernando'\r\n//      }\r\n//  Si no esta autenticado el state estara vacio\r\n\r\nexport const authReducer = ( state = {}, action ) => {\r\n    \r\n    switch (action.type) {\r\n        case types.login:\r\n            return {\r\n                uid: action.payload.uid,\r\n                name: action.payload.displayName    \r\n            }         \r\n            \r\n        case types.logout:\r\n            return { }\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\n//console.log(process.env);\r\n\r\n//PARA DESARROLLO\r\nexport const firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_APIKEY,\r\n    authDomain: process.env.REACT_APP_AUTHDOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECTID,\r\n    storageBucket: process.env.REACT_APP_STORAGEBUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGINGSENDERID,\r\n    appId: process.env.REACT_APP_APPID,\r\n};\r\n\r\n// //PARA TESTING\r\n// const firebaseConfigTesting = {\r\n//   apiKey: \"AIzaSyCoOmtra5ckFJNXoBJIjGj2kxxgW7MLxt0\",\r\n//   authDomain: \"urban-monsters-fagr.firebaseapp.com\",\r\n//   databaseURL: \"https://urban-monsters-fagr-default-rtdb.europe-west1.firebasedatabase.app\",\r\n//   projectId: \"urban-monsters-fagr\",\r\n//   storageBucket: \"urban-monsters-fagr.appspot.com\",\r\n//   messagingSenderId: \"796778185874\",\r\n//   appId: \"1:796778185874:web:bc4deb44d3fa838bb7d24b\"\r\n// };\r\n\r\n// //Con esto se el environment en el que se esta ejecutando mi app\r\n// //console.log(process.env);\r\n\r\n// //Aqui agrego configuraciones para el uso de environments\r\n// if( process.env.NODE_ENV === 'test' ) {\r\n//   // Conf. Base de datos Testing\r\n//   firebase.initializeApp(firebaseConfigTesting);\r\n// } else {\r\n  // Conf. Base de datos Desarrollo\r\n  //firebase.initializeApp(firebaseConfig);\r\n//}\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n//Referencia a la base de datos\r\nconst db = firebase.firestore();\r\n\r\n//Esto es para poder autenticarse con Google\r\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport {\r\n  db,\r\n  googleAuthProvider,\r\n  firebase\r\n}","\r\nimport { db } from \"../firebase/firebaseConfig\";\r\n\r\n\r\nexport const loadNotes = async( uid ) => {\r\n    //Para obtener todas la notas de un usuario\r\n    const notesSnap = await db.collection(`${ uid }/journal/notes`).get();\r\n    const notes = [];\r\n\r\n    notesSnap.forEach( snapHijo => {\r\n        notes.push({\r\n            id: snapHijo.id,\r\n            ...snapHijo.data()\r\n        })\r\n    })\r\n    \r\n    return notes;\r\n\r\n}","\r\n\r\nexport const fileUpload = async( file ) => {\r\n\r\n    //Aqui hemos puesto el url de cloudinary (el que nos da como usuario), aquel que hemos probado ya en postman para la carga ejemplo\r\n    const cloudUrl = 'https://api.cloudinary.com/v1_1/dxb9epkdj/upload';\r\n\r\n    const formData = new FormData();\r\n    formData.append( 'upload_preset', 'react-journal' );\r\n    formData.append('file', file);\r\n\r\n    try{\r\n\r\n        const resp = await fetch( cloudUrl, {\r\n            method: 'POST',\r\n            body: formData\r\n        });\r\n\r\n        if( resp.ok ){\r\n            const cloudResp = await resp.json();\r\n            //Si todo ha ido bien, obtengo la url segura\r\n            return cloudResp.secure_url;\r\n        } else {\r\n            //En el caso de que cloudinary nos de un error\r\n            //throw await resp.json();\r\n            return null;\r\n        }\r\n\r\n    } catch ( err ){\r\n        //En caso de un error del tipo: el url no existe\r\n        throw err;\r\n    }\r\n\r\n    //return \"el url de la imagen\"\r\n\r\n}","import Swal from 'sweetalert2';\r\n\r\nimport { db } from \"../firebase/firebaseConfig\";\r\nimport { types } from \"../types/types\";\r\nimport { loadNotes } from \"../helpers/loadNotes\";\r\nimport { fileUpload } from \"../helpers/fileUpload\";\r\n\r\n//Con getState podemos obtener el contenido del state, funciona similar al useSelector\r\nexport const startNewNote = () => {\r\n    return async( dispatch, getState ) => {\r\n\r\n        //Comprobacion del contenido del state\r\n        // const state = getState();\r\n        // console.log(state);\r\n\r\n        //Obtenemos el uid\r\n        const { uid } = getState().auth;\r\n        //o\r\n        //const uid = getState().auth.uid;\r\n        \r\n        const newNote = {\r\n            title: '',\r\n            body: '',\r\n            date: new Date().getTime()\r\n        }  \r\n\r\n        try {\r\n            //Para insertar una nota en Firebase\r\n            //Se trata de una accion asincrona, por eso utilizamos el async/await\r\n            const doc = await db.collection(`${ uid }/journal/notes`).add( newNote );\r\n            \r\n            dispatch( activeNote( doc.id, newNote ));\r\n            dispatch( addNewNote( doc.id, newNote ));\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n}\r\n\r\n//Voy a regresar un objeto(la nota seleccionada/activa), por eso pongo los parentesis\r\nexport const activeNote = ( id, note ) => ({\r\n    type: types.notesActive,\r\n    payload: {\r\n        id,\r\n        //Aqui viene toda la estructura de la nota\r\n        ...note\r\n    }\r\n});\r\n\r\n//Para hacer aparecer una nueva nota en la barra izq, una vez que hagamos clic en anadir\r\nexport const addNewNote = ( id, note) => ({\r\n    type: types.notesAddNew,\r\n    payload: {\r\n        id, ...note\r\n    }\r\n})\r\n\r\nexport const startLoadingNotes = ( uid ) => {\r\n    return async( dispatch ) => {\r\n        //Carga las notas del usuario\r\n        const notes = await loadNotes( uid );\r\n        dispatch( setNotes( notes ) );\r\n    }\r\n}\r\n\r\nexport const setNotes = ( notes ) => ({\r\n    type: types.notesLoad,\r\n    payload: notes\r\n});\r\n\r\nexport const startSaveNote = ( note ) => {\r\n    return async( dispatch, getState ) => {\r\n        //Obtiene el id del usuario\r\n        const { uid } = getState().auth;\r\n\r\n        //Para evitar un error por url undefined, miro si tengo el url. Si no lo tengo, lo elimino de la nota.\r\n        if( !note.url ){\r\n            delete note.url;\r\n        }\r\n\r\n        //Vamos a separar toda la nota, puesto que no queremos guardar el id (el id ya lo guarda firestore)\r\n        const noteToFirestore = { ...note };\r\n        //Asi, eliminamos el id del objeto\r\n        delete noteToFirestore.id;\r\n\r\n        //Hace el guardado de la nota\r\n        await db.doc(`${ uid }/journal/notes/${ note.id }`).update( noteToFirestore );\r\n\r\n        dispatch( refreshNote( note.id, noteToFirestore ) );\r\n\r\n        Swal.fire('Saved', note.title, 'success');\r\n    }\r\n}\r\n\r\nexport const refreshNote = ( id, note ) => ({\r\n    type: types.notesUpdated,\r\n    payload: {\r\n        id,\r\n        note: {\r\n            id,\r\n            ...note\r\n        }\r\n    }\r\n})\r\n\r\nexport const startUploading = ( file ) => {\r\n    return async( dispatch, getState ) => {\r\n\r\n        //Obtenemos la nota activa, a la que queremos actualizar el url o imagen\r\n        const { active: activeNote } = getState().notes;\r\n\r\n        Swal.fire({\r\n            title: 'Uploading...',\r\n            text: 'Please wait...',\r\n            allowOutsideClick: false,\r\n            //Esto es para mostrar el icono redondo que da vueltas\r\n            onBeforeOpen: () => {\r\n                Swal.showLoading();\r\n            }\r\n        })\r\n\r\n        //Y llamamos a nuestro helper \"fileUpload\" para obtener la url del fichero\r\n        const fileUrl = await fileUpload( file );\r\n\r\n        //Actualizamos la url que acabamos de actualizar justo arriba\r\n        activeNote.url = fileUrl;\r\n\r\n        //Guardamos la nota activa\r\n        dispatch( startSaveNote( activeNote ) );\r\n\r\n        //Cierra la ventana una vez que se ha subido el fichero\r\n        Swal.close();\r\n    }\r\n}\r\n\r\n//Necesito el id de lo que necesito borrar\r\nexport const startDeleting = ( id ) => {\r\n    return async( dispatch, getState ) => {\r\n\r\n        const uid = getState().auth.uid;\r\n        //Aqui lo borramos de la base de datos\r\n        await db.doc(`${ uid }/journal/notes/${ id }`).delete();\r\n        //Aqui desencadeno el borrado de la nota en el store\r\n        dispatch( deleteNote( id ) );\r\n    }\r\n}\r\n\r\nexport const deleteNote = ( id ) => ({\r\n    type: types.notesDelete,\r\n    payload: id\r\n});\r\n\r\nexport const noteLogout = () => ({\r\n    type: types.notesLogoutCleaning\r\n});","import { types } from \"../types/types\"\r\n\r\n\r\n\r\nexport const setError = (err) => ({\r\n    type: types.uiSetError,\r\n    payload: err\r\n});\r\n\r\nexport const removeError = () => ({\r\n    type: types.uiRemoveError\r\n});\r\n\r\nexport const startLoading = () => ({\r\n    type: types.uiStartLoading\r\n});\r\n\r\nexport const finishLoading = () => ({\r\n    type: types.uiFinishLoading\r\n});","import Swal from 'sweetalert2';\r\n\r\nimport { firebase, googleAuthProvider } from '../firebase/firebaseConfig';\r\nimport { types } from '../types/types';\r\nimport { noteLogout } from './notes';\r\nimport { finishLoading, startLoading } from './ui';\r\n\r\nexport const startLoginEmailPassword = ( email, password ) => {\r\n    return (dispatch) => {\r\n\r\n        dispatch( startLoading() );\r\n        \r\n        return firebase.auth().signInWithEmailAndPassword( email, password )\r\n            .then( ({ user }) => {\r\n\r\n                dispatch( login( user.uid, user.displayName ) );\r\n                dispatch( finishLoading() );\r\n\r\n            })\r\n            .catch( e => {\r\n                console.log(e);\r\n                dispatch( finishLoading() );\r\n                //El mensaje viene de SweetAlert2\r\n                Swal.fire('Error', e.message, 'error');\r\n            })        \r\n    }\r\n}\r\n\r\nexport const startRegisterWithEmailPasswordName = ( email, password, name ) => {\r\n    //Como es una tarea asincrona necesitamos regresar un callback\r\n    //Gracias al Thunk podemos hacer uso del dispatch\r\n    return( dispatch ) => {\r\n        firebase.auth().createUserWithEmailAndPassword( email, password )\r\n            .then( async({ user }) => {\r\n\r\n                await user.updateProfile({ displayName: name });\r\n\r\n                dispatch(\r\n                    login( user.uid, user.displayName )\r\n                )\r\n            })\r\n            .catch( e => {\r\n                console.log(e);\r\n                //El mensaje viene de SweetAlert2\r\n                Swal.fire('Error', e.message, 'error');\r\n            })\r\n    }\r\n}\r\n\r\nexport const startGoogleLogin = () => {\r\n    return (dispatch) => {\r\n        \r\n        firebase.auth().signInWithPopup( googleAuthProvider )\r\n            .then( ({ user }) => {\r\n                dispatch(\r\n                    login( user.uid, user.displayName )\r\n                )\r\n            });\r\n    }\r\n}\r\n\r\n//Esta accion regresara un objeto con una accion y un payload,\r\n//por ello el parentesis que envuelve a las llaves\r\nexport const login = (uid, displayName) => ({\r\n    type: types.login,\r\n    payload: {\r\n        uid,\r\n        displayName\r\n    }   \r\n})\r\n\r\n//Hace el signOut de firebase\r\nexport const startLogout = () => {\r\n    return async( dispatch ) => {\r\n        await firebase.auth().signOut();\r\n\r\n        dispatch( logout() );\r\n        dispatch( noteLogout() );\r\n        \r\n    }\r\n}\r\n//Hace el borrado del uid y del displayName\r\nexport const logout = () => (   {\r\n    type: types.logout  \r\n})","//ESTE CUSTOM HOOK HACE LA LECTURA DE LOS VALORES QUE RECIBE UNA CAJA DE TEXTO\r\n//DEVUELVE LOS VALORES JUNTO CON LA FUNCION \"HANDLEINPUTCHANGE\"\r\n\r\nimport { useState } from \"react\"\r\n\r\n//initialState seria igual a un objeto con name, email y password\r\nexport const useForm = ( initialState = {} ) => {\r\n    \r\n    const [values, setValues] = useState(initialState)\r\n\r\n    //Si no se recibe el valor de newFormState, coge el valor por defecto de initialState\r\n    const reset = ( newFormState = initialState ) => {\r\n        setValues( newFormState );\r\n    };\r\n\r\n\r\n    const handleInputChange = ( {target} ) => {\r\n\r\n        setValues({\r\n\r\n            ...values,\r\n            [target.name]: target.value\r\n\r\n        })\r\n\r\n    }\r\n\r\n    //Devuelve los valores junto con la funcion handleInputChange (este ultimo para poder hacer cambios)\r\n    return [ values, handleInputChange, reset ]\r\n}\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { startLoginEmailPassword, startGoogleLogin } from '../../actions/auth';\r\nimport { useForm } from '../../hooks/useForm/useForm';\r\n\r\nexport const LoginScreen = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { loading } = useSelector( state => state.ui );\r\n\r\n    const [ values, handleInputChange ] = useForm({\r\n        email: '',\r\n        password: ''\r\n    });\r\n\r\n    //Desestructuro values\r\n    const { email, password } =  values;\r\n\r\n    const handleLogin = (e) => {\r\n        e.preventDefault();\r\n        dispatch( startLoginEmailPassword( email, password) );\r\n    }\r\n\r\n    const handleGoogleLogin = () => {\r\n        dispatch( startGoogleLogin() );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"auth__title\">Login</h3>\r\n\r\n            <form \r\n                onSubmit={ handleLogin }\r\n                className=\"animate__animated animate__fadeIn animate__faster\"\r\n            >\r\n\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Email\"\r\n                    name=\"email\"\r\n                    autoComplete=\"off\"\r\n                    className=\"auth__input\"\r\n                    value={ email }\r\n                    onChange={ handleInputChange }\r\n                />\r\n\r\n                <input \r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    autoComplete=\"off\"\r\n                    className=\"auth__input\"\r\n                    value={ password }\r\n                    onChange={ handleInputChange }\r\n                />\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary btn-block\"\r\n                    //Deshabilita el boton\r\n                    disabled={ loading }\r\n                >\r\n                    Login\r\n                </button>\r\n\r\n                {/* Dibujado del boton Google */}\r\n                <div className=\"auth__social_networks\">\r\n                    <p>Login with social network</p>\r\n\r\n                    <div \r\n                        className=\"google-btn\"\r\n                        onClick= { handleGoogleLogin }\r\n                    >\r\n                        <div className=\"google-icon-wrapper\">\r\n                            <img className=\"google-icon\" src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\" alt=\"google button\" />\r\n                        </div>\r\n                        <p className=\"btn-text\">\r\n                            <b>Sign in with google</b>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <Link \r\n                    to=\"/auth/register\"\r\n                    className=\"link\"\r\n                >\r\n                    Create new account\r\n                </Link>\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport validator from 'validator';\r\nimport { startRegisterWithEmailPasswordName } from '../../actions/auth';\r\nimport { removeError, setError } from '../../actions/ui';\r\n\r\nimport { useForm } from '../../hooks/useForm/useForm';\r\n\r\nexport const RegisterScreen = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { msgError } = useSelector( state => state.ui );\r\n\r\n    const [ values, handleInputChange ] = useForm({\r\n        name: 'Hernando',\r\n        email: 'nando@hotmail.com',\r\n        password: '123456',\r\n        password2: '123456'\r\n    });\r\n\r\n    //Desestructuro values\r\n    const { name, email, password, password2 } =  values;\r\n\r\n    const handleRegister = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( isFormValid() ) {\r\n            dispatch( startRegisterWithEmailPasswordName( email, password, name ) );\r\n\r\n        } \r\n    }\r\n\r\n    const isFormValid = () => {\r\n        if( name.trim().length === 0 ){\r\n            dispatch( setError( \"Name is required\" ) );\r\n            return false;\r\n        }else if( !validator.isEmail( email ) ) {\r\n            dispatch( setError( \"Email is not valid\" ) );\r\n            return false;\r\n        }else if (password !== password2 || password.length < 5 ){\r\n            dispatch( setError( \"Password should be at least 6 characters long, and match each other\" ) );\r\n            return false;\r\n        }\r\n        dispatch( removeError() );\r\n        return true;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"auth__title\">Register</h3>\r\n\r\n            <form \r\n                onSubmit={ handleRegister }\r\n                className=\"animate__animated animate__fadeIn animate__faster\"\r\n            >\r\n                {\r\n                    msgError && \r\n                    (\r\n                        <div className=\"auth__alert-error\">\r\n                            { msgError }\r\n                        </div> \r\n                    )\r\n                    \r\n                }\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Name\"\r\n                    name=\"name\"\r\n                    autoComplete=\"off\"\r\n                    className=\"auth__input\"\r\n                    value={ name }\r\n                    onChange={ handleInputChange }\r\n                />\r\n\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Email\"\r\n                    name=\"email\"\r\n                    autoComplete=\"off\"\r\n                    className=\"auth__input\"\r\n                    value={ email }\r\n                    onChange={ handleInputChange }\r\n                />\r\n\r\n                <input \r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    autoComplete=\"off\"\r\n                    className=\"auth__input\"\r\n                    value={ password }\r\n                    onChange={ handleInputChange }\r\n                />\r\n\r\n                <input \r\n                    type=\"password\"\r\n                    placeholder=\"Confirm password\"\r\n                    name=\"password2\"\r\n                    autoComplete=\"off\"\r\n                    className=\"auth__input\"\r\n                    value={ password2 }\r\n                    onChange={ handleInputChange }\r\n                />\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary btn-block mb-5\"\r\n                    //Deshabilita el boton\r\n                    //disabled={ true }\r\n                >\r\n                    Register\r\n                </button>\r\n                \r\n                <Link \r\n                    to=\"/auth/login\"\r\n                    className=\"link\"\r\n                >\r\n                    Already registered?\r\n                </Link>\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport { LoginScreen } from '../components/auth/LoginScreen';\r\nimport { RegisterScreen } from '../components/auth/RegisterScreen';\r\n\r\nexport const AuthRouter = () => {\r\n    return (\r\n        <div className=\"auth__main\">\r\n            <div className=\"auth__box-container\">\r\n                <Switch>\r\n                    <Route \r\n                        exact\r\n                        path=\"/auth/login\" \r\n                        component={ LoginScreen } \r\n                    />\r\n                    <Route \r\n                        exact\r\n                        path=\"/auth/register\" \r\n                        component={ RegisterScreen } \r\n                    />\r\n\r\n                    {/* Si no encuentra ninguna de las rutas anteriores, llamara a /auth/login */}\r\n                    <Redirect to=\"/auth/login\" />\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","//ESTE COMPONENTE CONTROLARA QUE UNICAMENTE LOS USUARIOS LOGADOS PUEDAN ACCEDER A LA APP\r\nimport React  from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\nexport const PrivateRoute = ({\r\n    isAuthenticated,\r\n    //Renombramos la propiedad para que sea un componente\r\n    component: Component,\r\n    //Aqui va el resto de argumentos: el path, el exact, etc....para pasarselos al componente\r\n    ...rest\r\n}) => {\r\n\r\n    //Con esto guardamos la ultima pagina visitada. De modo que si el usuario hace un logout, luego puede volver directamente a \r\n    //esta pagina\r\n    //localStorage.setItem( 'lastPath', rest.location.pathname );\r\n\r\n    return(\r\n        <Route { ...rest }\r\n            // Con esta forma de llamada(callback) tendremos el history, location y params\r\n            component={ (props) => (\r\n                ( isAuthenticated )\r\n                    ? ( <Component { ...props } /> )\r\n                    : ( <Redirect to=\"/auth/login\" /> )\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nPrivateRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}","//ESTE COMPONENTE permite a todos LOS USUARIOS PUEDAN ACCEDER A LA APP\r\nimport React  from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\nexport const PublicRoute = ({\r\n    isAuthenticated,\r\n    //Renombramos la propiedad para que sea un componente\r\n    component: Component,\r\n    //Aqui va el resto de argumentos: el path, el exact, etc....para pasarselos al componente\r\n    ...rest\r\n}) => {\r\n\r\n    return(\r\n        <Route { ...rest }\r\n            // Con esta forma de llamada(callback) tendremos el history, location y params\r\n            component={ (props) => (\r\n                ( isAuthenticated )\r\n                    ? ( <Redirect to=\"/\" /> )\r\n                    : ( <Component { ...props } /> )\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nPublicRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}","import React from 'react';\r\nimport moment from 'moment';\r\nimport { useDispatch } from 'react-redux';\r\nimport { activeNote } from '../../actions/notes';\r\n\r\nexport const JournalEntry = ({ id, date, title, body, url }) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const noteDate = moment( date );\r\n\r\n    const handleEntryClick = () => {\r\n        dispatch( \r\n            activeNote( id, {\r\n                date, title, body, url\r\n            }) \r\n        );\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className=\"journal__entry pointer animate__animated animate__fadeIn animate__faster\"\r\n            onClick={ handleEntryClick }\r\n        >\r\n\r\n            {\r\n                //Si existe el url lo va a mostrar en el lateral junto con la nota\r\n                url &&\r\n                <div \r\n                    className=\"journal__entry-picture\"\r\n                    // El style en React tiene que ir definido con un objeto con sus propiedades\r\n                    style={{\r\n                        backgroundSize: 'cover',\r\n                        backgroundImage: `url(${ url })`\r\n                    }}\r\n                >\r\n                </div> \r\n            }      \r\n\r\n            <div className=\"journal__entry-body\">\r\n                <p className=\"journal__entry-title\">\r\n                    { title }\r\n                </p>\r\n                <p className=\"journal__entry-content\">\r\n                    { body }\r\n                </p>\r\n            </div>\r\n            <div className=\"journal__entry-date-box\">\r\n                <span>{ noteDate.format( 'ddd' ) }</span>\r\n                <h4>{ noteDate.format( 'Do' ) }</h4>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { JournalEntry } from './JournalEntry';\r\n\r\nexport const JournalEntries = () => {\r\n\r\n    const { notes } = useSelector( state => state.notes );\r\n\r\n    return (\r\n        <div className=\"journal__entries\">\r\n            {\r\n                notes.map( note => (\r\n                    <JournalEntry \r\n                        key={ note.id }\r\n                        { ...note }\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { startLogout } from '../../actions/auth';\r\nimport { startNewNote } from '../../actions/notes';\r\nimport { JournalEntries } from './JournalEntries';\r\n\r\nexport const Sidebar = () => {\r\n\r\n    const { name } = useSelector( state => state.auth );\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleLogout = () => {\r\n        dispatch( startLogout() );\r\n    }\r\n\r\n    const handleAddNew = () => {\r\n        dispatch( startNewNote() );\r\n    }\r\n\r\n    return (\r\n        <aside className=\"journal__sidebar\">\r\n\r\n            <div className=\"journal__sidebar-navbar\">\r\n\r\n                <h3 className=\"mt-5\">\r\n                    {/* Este iciono viene de la pagina de font-awsome */}\r\n                    <i className=\"far fa-moon\" />\r\n                    <span> { name }</span>\r\n                </h3>\r\n\r\n                <button \r\n                    className=\"btn\"\r\n                    onClick={ handleLogout }\r\n                >\r\n                    Logout\r\n                </button>\r\n\r\n            </div>\r\n\r\n            <div \r\n                className=\"journal__new-entry\"\r\n                onClick={ handleAddNew }\r\n            >\r\n                <i className=\"far fa-calendar-plus fa-5x\"></i>\r\n                <p className=\"mt-5\">\r\n                    New entry\r\n                </p>\r\n            </div>\r\n\r\n            <JournalEntries />\r\n            \r\n        </aside>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { startSaveNote, startUploading } from '../../actions/notes';\r\n\r\nexport const NotesAppBar = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { active } = useSelector( state => state.notes );\r\n\r\n    const handleSave = () => {\r\n        //console.log(active)\r\n        dispatch( startSaveNote( active ) );\r\n    }\r\n\r\n    const handlePictureClick = () => {\r\n        //Hace un click del input con el id fileSelector\r\n        document.querySelector('#fileSelector').click();\r\n    }\r\n\r\n    const handleFileChange = (e) => {\r\n        //console.log(e)\r\n        const file = e.target.files[0];\r\n        //Si existe el fichero, lo manda a subir\r\n        if( file ){\r\n            dispatch( startUploading( file ) );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"notes__appbar\">\r\n            <span>28 de agosto 2020</span>\r\n\r\n            <input\r\n                id=\"fileSelector\"\r\n                type=\"file\"\r\n                name=\"file\"\r\n                style={{ display: 'none' }}\r\n                onChange={ handleFileChange }\r\n            />\r\n\r\n            <div>\r\n                <button \r\n                    className=\"btn\"\r\n                    onClick={ handlePictureClick }\r\n                >\r\n                    Picture\r\n                </button>\r\n                <button \r\n                    className=\"btn\"\r\n                    onClick={ handleSave }\r\n                >\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { activeNote, startDeleting } from '../../actions/notes';\r\nimport { useForm } from '../../hooks/useForm/useForm';\r\nimport { NotesAppBar } from './NotesAppBar';\r\n\r\nexport const NoteScreen = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    //Hago un renombre a  note puesto que active no me resulta lo suficientemente claro\r\n    const { active: note } = useSelector( state => state.notes );   \r\n    const [ values, handleInputChange, reset ] = useForm( note );\r\n    const { body, title, id } = values;\r\n\r\n    //Voy a guardar el id de la  nota seleccionada actualmente\r\n    const activeId = useRef( note.id );\r\n\r\n    //Necesitamos el useEffect para que se actualice la nota cada vez que seleccionamos una distinta\r\n    //Con esto evitamos un bucle infinito\r\n    useEffect(() => {\r\n        //Con current obtengo la instancia actual\r\n        if( note.id !== activeId.current ){\r\n            reset( note );\r\n            activeId.current = note.id;\r\n        }    \r\n    }, [ note, reset ])\r\n\r\n    useEffect(() => {\r\n        dispatch( activeNote( values.id, { ...values }) );\r\n    }, [ values, dispatch ])\r\n\r\n    const handleDelete = () => {\r\n        dispatch( startDeleting( id ) );\r\n    }\r\n\r\n    return (\r\n        <div className=\"notes__main-content\">\r\n            <NotesAppBar />\r\n            <div className=\"notes__content\">\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    placeholder=\"Some awsome title\"\r\n                    className=\"notes__title-input\"\r\n                    autoComplete=\"off\"\r\n                    value={ title }\r\n                    onChange={ handleInputChange }\r\n                />\r\n                <textarea\r\n                    name=\"body\"\r\n                    placeholder=\"What happened today?\"\r\n                    className=\"notes__textarea\"\r\n                    value={ body }\r\n                    onChange={ handleInputChange }\r\n                >\r\n                </textarea>\r\n                {\r\n                    //Si existe la nota, la muestra\r\n                    ( note.url ) &&\r\n                    <div className=\"notes__image\">\r\n                        <img \r\n                            src={ note.url }\r\n                            alt=\"imagen\"\r\n                        />\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n            <button\r\n                className=\"btn btn-danger\"\r\n                onClick={ handleDelete }\r\n            >\r\n                Delete\r\n            </button>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nexport const NothingSelected = () => {\r\n    return (\r\n        <div className=\"nothing__main-content\">\r\n            <p>\r\n                Select something\r\n                <br/>\r\n                or create an entry\r\n            </p>\r\n            <i className=\"far fa-star fa-4x mt-5\"></i>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Sidebar } from './Sidebar';\r\nimport { NoteScreen } from '../notes/NoteScreen';\r\nimport { NothingSelected } from './NothingSelected';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const JournalScreen = () => {\r\n\r\n    const { active } = useSelector( state => state.notes );\r\n\r\n    return (\r\n        <div className=\"journal__main-content animate__animated animate__fadeIn animate__faster\">\r\n\r\n            <Sidebar />\r\n\r\n            <main>\r\n\r\n                {\r\n                    ( active )\r\n                        //Si active es true (es decir, si hay notas)\r\n                        ? ( <NoteScreen /> )\r\n                        //Si active es false (es decir, si no hay notas)\r\n                        : ( <NothingSelected /> )\r\n                }\r\n            \r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n","//ESTE VA A SER EL SISTEMA DE RUTAS PRINCIPAL de la aplicacion\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Redirect,\r\n  Switch\r\n} from 'react-router-dom';\r\n//import { AuthContext } from \"../auth/AuthContext\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { firebase } from \"../firebase/firebaseConfig\";\r\nimport { AuthRouter } from \"./AuthRouter\";\r\nimport { PrivateRoute } from \"./PrivateRoute\";\r\nimport { PublicRoute } from \"./PublicRoute\";\r\n\r\nimport { JournalScreen } from \"../components/journal/JournalScreen\";\r\nimport { login } from \"../actions/auth\";\r\nimport { startLoadingNotes } from \"../actions/notes\";\r\n\r\nexport const AppRouter = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    //Esto hace de bandera (checking), mientras sea true no mostrara nada de la aplicacion \r\n    //(no autenticado = true = prohibicion activada). \r\n    //Cambiara su estado cuando tenga una respuesta de la autenticacion (despues del if dentro del useEffect)\r\n    //(autenticado = false = prohibicion desactivada)\r\n    const [ checking, setChecking ] = useState( true );\r\n    const [ isLoggedIn, setIsLoggedIn ] = useState( false );\r\n\r\n    //Estas lineas permiten mantener el estado de la autenticacion al recargar\r\n    useEffect(() => {\r\n        //Esto va a crear un observable, el cual es un tipo de objeto especial que se puede disparar mas de una vez\r\n        //Se dispara cada vez que se hace un logeo de un usuario\r\n        firebase.auth().onAuthStateChanged( async(user) => {\r\n            //Si el user existe, es decir tiene algo, entonces mira si existe el uid. Si no existe user, no entra en el if.\r\n            if (user?.uid){\r\n                dispatch( login( user.uid, user.displayName ) );\r\n                //si esta autenticado lo pone en true\r\n                setIsLoggedIn( true );\r\n                //Manda a cargar las notas del usuario\r\n                dispatch( startLoadingNotes( user.uid ) );\r\n            } else {\r\n                setIsLoggedIn( false );\r\n            }\r\n            //se desactiva la prohibicion\r\n            setChecking(false);\r\n        });  \r\n    }, [ dispatch, setChecking, setIsLoggedIn ])\r\n\r\n    if( checking ){\r\n        //Aqui se podria poner algun icono chulo que de vueltas, por ejemplo\r\n        return (\r\n            <h1>Please wait...</h1>\r\n        )\r\n    }\r\n\r\n    //user deberia tener \"logged: true\" o \"logged: false\"\r\n    //const { user } = useContext( AuthContext );\r\n\r\n    return (\r\n        <Router>\r\n            <div>          \r\n                <Switch>\r\n                    <PublicRoute \r\n                        path=\"/auth\" \r\n                        component={ AuthRouter } \r\n                        isAuthenticated={ isLoggedIn }\r\n                    />\r\n                    <PrivateRoute \r\n                        exact\r\n                        path=\"/\" \r\n                        component={ JournalScreen } \r\n                        isAuthenticated={ isLoggedIn }\r\n                    />\r\n\r\n                    {/* Si no encuentra ninguna de las rutas anteriores, llamara a /auth/login */}\r\n                    <Redirect to=\"/auth/login\" />\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { store } from './store/store';\r\nimport { AppRouter } from './routers/AppRouter';\r\n\r\nexport const JournalApp = () => {\r\n    return (\r\n        <Provider store={ store }>\r\n            <AppRouter />\r\n        </Provider>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { JournalApp } from './JournalApp';\nimport './styles/styles.scss';\n\nReactDOM.render(\n    <JournalApp />,  \n  document.getElementById('root')\n);\n"],"sourceRoot":""}